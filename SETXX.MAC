	.IIF NDF MCEXEC , .NLIST

;+
; File SETXX
;	This file used to be 4 files:  FLGDF,GENMC,MPARAM,RTIOCH
; The rest of this page was in the MAC11 parameter file; it is the
; macros used for the VAX RT emulator for snap dumps.
;-

	.IF NE,VAX$		; only worthwhile on the emulator
	.sbttl	Snap Dump  macros
; The following is a MACRO to create the required flag word for the
; SNAP dump feature of RT11TASK. The arguments are:
;
;	NUM - number of bytes to dump (0 to 255.)
;	RAD - radix select, can be either 8. or 16.
;	BYT - if 1, then dump bytes otherwise dump words
;	R50 - if 1, then dump words with RAD50 equivalent too.
;	REG - if 1, then dump registers then dump memory
;	IND - if 1, then address is indirect
;	ASC - if 1, then dump only ASCII bytes
;	DAT - if 1,then display date/time on dump
;
; DUMP argument lists consist of word pairs where the first word is the flag
; word and the second is the starting address (or the address of the address) 
; to dump stored position independent (address-.).
; The argument list is terminated with a flag word of 0.
;
; THE EXECUTION OF A SNAP DUMP DOES NOT AFFECT THE CONDITION CODES.

.MACRO SNPFLG NUM=0,RAD=8.,BYT=0,R50=0,REG=0,IND=0,ASC=0,DAT=0
	...1=NUM&255.
	.IIF NE,BYT,	...1=...1+256.
	.IF EQ,RAD-8.
	.IFF
	.IF EQ,RAD-16.
	...1=...1+512.
	.IFF
	.ERROR RAD ;RADIX CAN BE ONLY 8 OR 16
	.ENDC
	.ENDC
	.IIF NE,R50,	...1=...1+1024.
	.IIF NE,REG,	...1=...1+2048.
	.IIF NE,IND,	...1=...1+4096.
	.IIF NE,ASC,	...1=...1+8192.
	.IIF NE,DAT,	...1=...1+16384.
	.WORD ...1
	.ENDM

.MACRO SNPADR ADDRESS
	.WORD <ADDRESS>-.
	.ENDM

.MACRO SNAP ARG
	.WORD ^O30,<ARG>-.
	.ENDM
	.ENDC	;ne,vax$

	.SBTTL	Symbolic definitions
;+
; File was FLGDF
; This prefix file contains symbolic definitions for character codes,
; object module record types and symbol table mode bits.
;-

;+
; Symbolic bit definitions for MACXX (which assembler is this, anyway?)
;-

.IIF NDF MACXX,	MACXX=1		; assume DEC macro
.IIF EQ,MACXX,	MACXX=1		; assume same thing

;+
; Symbolic character defines.
;-

CH.TLD= '~
CH.CCR= '}
CH.OCR= '{
CH.IOR=	'!
CH.QTM=	'"
CH.HSH=	'#
CH.DOL=	'$
CH.PCT=	'%
CH.AND=	'&
CH.XCL=	''
CH.LP=	'(
CH.RP=	')
CH.MUL=	'*
CH.ADD=	'+
CH.COM=	',
CH.SUB=	'-
CH.DOT=	'.
CH.DIV=	'/
CH.COL=	':
CH.SMC=	';
CH.LAB=	'<
CH.EQU=	'=
CH.RAB=	'>
CH.QM=	'?
CH.IND=	'@
CH.BSL=	'\
CH.UAR=	'^

LET.A=	'A
LET.B=	'B
LET.C=	'C
LET.D=	'D
LET.E=	'E
LET.F=	'F
LET.G=	'G
LET.H=	'H
LET.O=	'O
LET.X=	'X
LET.Z=	'Z

DIG.0=	'0
DIG.9=	'9

TAB=	11
LF=	12
VT=	13
FF=	14
CR=	15
SPACE=	40

LST.KB=	1
LST.LP=	2

	.IF NDF	XREL

;Object module definitions

;Relocation record (RLD) type defines

RLDT00=	00	;ABSOLUTE DATA
RLDT01=	01	;INTERNAL RELOCATION		TST	#I
RLDT02=	02	;GLOBAL RELOCATION		TST	#X
RLDT03=	03	;INTERNAL DISPLACED RELOCATION	TST	ABS
RLDT04=	04	;GLOBAL DISPLACED RELOCATION	TST	X
RLDT05=	05	;GLOBAL ADDITIVE RELOCATION	TST	#X+6
RLDT06=	06	;GLOBAL ADDITIVE DISPLACED	TST	#X+6
RLDT07=	07	;NEW CSECT			.=X
RLDT10=	10	;SEQUENCE BREAK			.=.+X
RLDT11=	11	;PROGRAM LIMITS			.LIMIT
RLDT15=	15	;SECTOR ADDITIVE RELOCATION	TST	#O
RLDT16=	16	;SECTOR ADDITIVE DISPLACED	TST	#O+6
RLDT17=	17	;COMPLEX RELOCATION		TST	G1+G2*R1!R2...
RLDT20= 20	;DPAGE DEFINITION		.DPAGE	n

;Global symbol dictionary entry types

GSDT00=	00*400	;OBJECT MODULE NAME
GSDT01=	01*400	;PROGRAM SECTION NAME
GSDT02=	02*400	;INTERNAL SYMBOL TABLE
GSDT03=	03*400	;TRANSFER ADDRESS
GSDT04=	04*400	;SYMBOL DECLARATION
GSDT05= 05*400	;PROGRAM SECTION NAME
GSDT06=	06*400	;VERSION IDENTIFICATION

;Object module record types

BLKT01=	01	;GSD
BLKT02=	02	;GSD END
BLKT03=	03	;TEXT BLOCK
BLKT04=	04	;RLD BLOCK
BLKT05=	05	;ISD
BLKT06=	06	;MODULE END

	.ENDC

;Flags used in symbol table mode

DEFFLG=	010		;DEFINED
.IF ne,MACXX&.pdp11
DFGFLG= 020		;DEFAULTED GLOBAL REFERENCE
.IFF
BSEFLG= 020
.ENDC
RELFLG=	040		;RELOCATABLE
GLBFLG=	100		;GLOBAL
CPXFLG= 200		;COMPLEX RELOCATION EXPRESSION
.IIF ne,MACXX&<..m69!.6502>,FWDFLG= 200		;FORWARD REFERENCE

REGFLG=	1		;REGISTER
LBLFLG=	2		;LABEL
MDFFLG=	4		;MULTILPY DEFINED

;FLAGS USED IN COMPLEX RELOCATION EXPRESSIONS

CPXOPC=	DEFFLG			;COMPLEX OPCODE
CPXADD=	1			;ADD
CPXSUB=	2			;SUBTRACT
CPXMUL=	3			;MULTIPLY
CPXDIV=	4			;DIVIDE
CPXAND=	5			;AND
CPXIOR=	6			;INCLUSIVE OR
CPXXOR=	7			;EXCLUSIVE OR
CPXNEG=	10			;NEGATE
CPXCOM=	11			;COMPLEMENT
CPXSTO=	12			;STORE RESULT
CPXSDS=	13			;STORE RESULT WITH DISPLACED RELOCN
CPXUSD= 14			;UNSIGNED DIVIDE
CPXSWB= 15			;SWAP BYTES
CPXGLB=	16			;STACK VALUE OF GLOBAL SYMBOL
CPXREL=	17			;STACK RELOCATABLE VALUE
CPXCON=	20			;STACK CONSTANT
CPXHIB= 21			;USE HIGH BYTE ONLY
CPXLOB= 22			;USE LOW BYTE ONLY
CPXMOD= 23			;MODULO
;     = 24			;UNASSIGNED
CPXSHL= 25			;SHIFT LEFT
CPXSHR= 26			;SHIFT RIGHT

; PROGRAM SECTION ATTRIBUTE FLAG BIT DEFINITIONS


CSTMEM=	001			;MEMORY SPEED (1=HIGH, 0=LOW)
CSTALO=	004			;ALLOCATION (1=OVR, 0=CON)
CSTDEF= 010			;DEFINED (REQIRED BIT)
.IF ne,MACXX&.pdp11
CSTACC=	020			;ACCESS (1=RO, 0=RW)
.IFF
CSTBSE= 020			;BASE SECTION
.ENDC
CSTREL=	040			;RELOCATION (1=REL, 0=ABS)
CSTGBL=	100			;SCOPE (1=GLOBAL, 0=LOCAL)
CSTTYP=	200			;TYPE (1=DATA, 0=INSTRUCTION)

; DEFAULT SECTION FLAGS

ASTFLG=	CSTALO!CSTGBL!DEFFLG	;ABS SECTION
CSTFLG=	CSTREL!DEFFLG		;CSECT SECTION
PSTFLG=	CSTFLG			;PSECT SECTION

.IF ne,MACXX&.pdp11		;MACRO>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;ADDRESS MODE FLAGS

AM.DEF=	10			;DEFERRED MODE
AM.INC=	20			;AUTO-INCREMENT MODE
AM.DEC=	40			;AUTO-DECREMENT MODE
AM.NDX=	60			;INDEX MODE
AM.PC=	07			;PC MODE ADDRESSING
AM.IMM=	AM.INC+AM.PC		;IMMEDIATE MODE
AM.REL=	AM.NDX+AM.PC		;RELATIVE MODE
.ENDC				;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	.sbttl	Generate macros

;+
; File was GENMC
;-


; GENCALL-GENERATE MACRO THAT CALLS SUBROUTINE OF SAME NAME

.MACRO	GENCAL NAME
	.MACRO	NAME
	CALL	NAME
	.ENDM
.ENDM

; GENERATE CALL MACROS

	GENCAL	SAVREG		;SAVE REGISTERS
	GENCAL	EXPR		;CALL THE EXPRESSION EVALUATOR
	GENCAL	TERM
	GENCAL	RELEXP
	GENCAL	RELTST
	GENCAL	ABSEXP
	GENCAL	ABSTST
	GENCAL	ABSERR
	GENCAL	GLBEXP
	GENCAL	ABSTRM		;ABSOLUTE TERM
	GENCAL	RELTRM		;RELOCATABLE TERM
	GENCAL	GLBTRM		;GLOBAL TERM
	GENCAL	GETSYM
	GENCAL	SETSYM
	GENCAL	GETR50
	GENCAL	SETR50
	GENCAL	TSTR50
	GENCAL	GETNB
	GENCAL	SETNB
	GENCAL	GETCHR
	GENCAL	SETCHR
	GENCAL	GSARG
	GENCAL	TSTARG
	GENCAL	SETIMM
	GENCAL	SETDSP
	GENCAL	STCODE
	GENCAL	SSRCH
	GENCAL	OSRCH
	.IIF NDF XMACRO, GENCAL	MSRCH
	.IIF NDF XEDLSB, GENCAL	LSRCH
	GENCAL	SETPF0
	GENCAL	SETPF1
	GENCAL	DNC
	GENCAL	CVTNUM
	GENCAL	R50UNP
	GENCAL	MOVBYT
	GENCAL	SETXPR
	.IF NDF	XCREF
	GENCAL	CRFREF		;CROSS REFERENCE A SYMBOL
	GENCAL	CRFDEF		;DITTO, DEFINING IT
	.IFF
	.MACRO	CRFREF		;DUMMY IF NO CREF
	.ENDM
	.MACRO	CRFDEF
	.ENDM
	.ENDC

; CHARACTER SCAN MACROS

.MACRO	CHSCAN	TABLE	;CHARACTER SCAN
	MOV	#TABLE,R0
	CALL	CHSCAN
.ENDM

.MACRO	GCHTBL	CHAR,	ADDR	;GEN CHARACTER SCAN TABLE
	.WORD	ADDR,	CHAR
.ENDM

; ROLL HANDLER ROUTINE CALLS

.MACRO	SEARCH	ROLNUM	;BINARY SEARCH
	MOV	#ROLNUM,R0
	CALL	SEARCH
.ENDM

.MACRO	SCAN	ROLNUM	;LINEAR SCAN
	MOV	#ROLNUM,R0
	CALL	SCAN
.ENDM

.MACRO	SCANW	ROLNUM	;LINEAR SCAN, ONE WORD
	MOV	#ROLNUM,R0
	CALL	SCANW
.ENDM

.MACRO	NEXT	ROLNUM	;FETCH NEXT ENTRY
	MOV	#ROLNUM,R0
	CALL	NEXT
.ENDM

.MACRO	APPEND	ROLNUM	;APPEND TO END OF ROLL
	MOV	#ROLNUM,R0
	CALL	APPEND
.ENDM

.MACRO	ZAP	ROLNUM	;CLEAR ROLL
	MOV	#ROLNUM,R0
	CALL	ZAP
.ENDM

	GENCAL	INSERT		;INSERT (MUST BE PRECEDED BY ONE
				;OF THE ABOVE TO SET POINTERS)
	GENCAL	SETROL		;SAVE AND SET REGS FOR ABOVE


; LISTING MACROS

.MACRO	PUTKB ADDR
	MOV	ADDR,R0
	CALL	PUTKB
.ENDM

.MACRO	PUTLP ADDR
	MOV	ADDR,R0
	CALL	PUTLP
.ENDM

.MACRO	PUTKBL ADDR
	MOV	ADDR,R0
	CALL	PUTKBL
.ENDM

.MACRO	PUTLIN ADDR
	.IF DIF	<ADDR>,<R0>
	MOV	ADDR,R0
	.ENDC
	CALL	PUTLIN
.ENDM

; PDP11/45-40 INSTRUCTION MACROS

	.IF NDF	PDPV45
.MACRO	MUL	SRC,DST
	.GLOBL	MUL
	.IIF DIF <SRC>,<R3>,	MOV	SRC,R3
	.IIF DIF <DST>,<R0>,	.ERROR	;ILLEGAL MUL ARGS
	CALL	MUL
.ENDM

.MACRO	DIV	SRC,DST
	.GLOBL	DIV
	.IIF DIF <SRC>,<R3>,	MOV	SRC,R3
	.IIF DIF <DST>,<R0>,	.ERROR	;ILLEGAL DIV ARGS
	CALL	DIV
.ENDM

.MACRO	SOB	REG,ADDR
	DEC	REG
	BNE	ADDR
.ENDM

	.ENDC
.MACRO	XOR S,D
	MOV S,-(SP)
	BIC D,(SP)
	BIC S,D
	BIS (SP)+,D
.ENDM

; ERROR AND SET NONZERO MACROS

.MACRO	ERROR	ARG
	BIS	#ERR.'ARG,ERRBTS
.ENDM

.MACRO	SETNZ	ADDR	;SET ADDR TO NON-ZERO FOR T/F FLAGS
	MOV	SP,ADDR
.ENDM

; INTEGER MULTILPY IMMEDIATE MACRO

.MACRO	IMULI	COUNT,ADDR
	.LIST	MEB
T.VAL=	COUNT
	.IF EQ	T.VAL
	CLR	ADDR
	.IFF
	.IF LT	T.VAL
T.VAL=	-T.VAL
	NEG	ADDR
	.ENDC
T.FLAG=	0
T.MASK=	040000
	.REPT	^D14
	.IF LE	T.MASK-T.VAL
	.IF NE	T.MASK&T.VAL
	.IF NE	T.MASK-T.VAL
	.IF EQ	T.FLAG
	MOV	ADDR,-(SP)
T.FLAG=	1
	.IFF
	.IF NE	T.MASK-1&T.VAL
	ADD	(SP),ADDR
	.IFF
	ADD	(SP)+,ADDR
T.FLAG=	0
	.ENDC
	.ENDC
	.ENDC
	.ENDC
	ASL	ADDR
	.ENDC
T.MASK=	T.MASK/2
	.ENDR
	.IF NE	T.FLAG
	ADD	(SP)+,ADDR
	.ENDC
	.ENDC
	.NLIST	MEB
.ENDM

; VIRTUAL MEMORY MACRO CALLS

	.IF NDF	XVIRTM

.IRP	NAME,<CVRL,CVRL2,ALBLK,ALVRS,ALVRT,LCKPG,UNLPG,WRMPG>
.MACRO	NAME
	CALL	$'NAME
.ENDM
.ENDR
.IRP	NAME,<LOCPG,ULCPG,WMCPG,ALPAG>	;NEW FUNCTIONS
.MACRO	NAME
	CALL	$'NAME
.ENDM
.ENDR
	.IFF
.IRP	NAME,<CVRL,CVRL2>
.MACRO	NAME
	MOV	R1,R0
.ENDM
.ENDR
.IRP	NAME,<ALVRS,ALVRT,ALPAG>
.MACRO	NAME
	CALL	$'NAME
.ENDM
.ENDR
.IRP	NAME,<ALBLK,LCKPG,UNLPG,WRMPG,LOCPG,ULCPG,WMCPG>
.MACRO	NAME
.ENDM
.ENDR
	.ENDC

.MACRO	XMIT	WRDCNT	;MOVE SMALL # OF WORDS
	CALL	XMIT0-<WRDCNT*2>
	.ENDM	XMIT

.MACRO	.TSECT arg, a1, a2, a3, a4, a5, a6, a7
	.save
	.psect arg a1 a2 a3 a4 a5 a6 a7
	.endm	.TSECT

.MACRO	ENTSEC ARG
	.PSECT ARG
	.ENDM

.MACRO	XITSEC
	.PSECT
	.ENDM

.MACRO	ENTOVR ARG
	.ENDM

.MACRO	XITOVR ARG
	.ENDM

.MACRO	SETOVR ARG
	.ENDM

.MACRO	JMPOVR	ADRPNT
	JMP	@ADRPNT
	.ENDM

	.SBTTL	Logical Implications and Globals

;+
; file was MPARAM
;-

;THE FOLLOWING MACRO CAUSES ASSEMBLY OPTIONS TO BE
;PRINTED ON THE LOADER MAP AND ANY IMPLICATIONS
;(SECOND ARGUMENT) TO BE DEFINED.  OPTIONS ARE
;SELECTED BY EQUATING THEM TO ZERO.

.MACRO	LDRMAP	MNE,IMPLIES
	.IF DF	MNE
	.IRP	X,<IMPLIES>
X=	0			;INVOKE IMPLICATIONS
	.ENDM
	.ENDC
.ENDM

;THE FOLLOWING GROUP ENABLES FUNCTIONS

	LDRMAP	PAL11R,	<DOSV4,	XMACRO,	X40,	X45,	XEDPIC>
	LDRMAP	PAL11R,	<XEDLSB,XEDPNC,	XEDLC,	XLCTTM>
	LDRMAP	PAL11R,	<XZERR,	XRESKB,	TRAPS,	XCREF>
	LDRMAP	RSX11D,	<PDPV45>;RSX-11D
	LDRMAP	RSX11M,	<YQCMO>	;RSX-11M (I/O OPTIONS)
	LDRMAP	RT11
	LDRMAP	PDPV45		;PDP-11/45 INSTRUCTIONS
	LDRMAP	DBLBUF		;TRAN'D INPUT
	LDRMAP	YPHASE		;.PHASE/.DEPHAS
	LDRMAP	FIXSTK		;FIXED STACK LOCATION
	LDRMAP	YQCMO		;DIRECT QIO TO 'CMD OUTPUT DEVICE'

;THE FOLLOWING GROUP DISABLES FUNCTIONS

	.IIF DF	X40&X45,	XFLTG=	0

	LDRMAP	XSPOOL		;SPOOL LISTINGS (/SP)
	LDRMAP	XSUBD		;SUBSET DIRECTIVES (NO PAL-11
				;CONDITIONALS, .REM, .EOT)
	LDRMAP	XOPEXP		;NO PST SEARCH IN EXPRESSIONS
	LDRMAP	XSWIT,	XCREF	;NO SWITCHES
	LDRMAP	XREL,	XEDPIC	;ABS OUTPUT ONLY
	LDRMAP	XMACRO,	XSML	;ALL GENERATED CODE (MACRO, REPT, ETC.)
	LDRMAP	XSML		;SYSTEM MACROS
	LDRMAP	X40		;PDP-11/40 FEATURES
	LDRMAP	X45		;PDP-11/45 FEATURES
	LDRMAP	XFLTG,	XEDFPT	;FLOATING POINT EVALUATION
	LDRMAP	XEDABS		;ED.ABS
	LDRMAP	XEDAMA		;ED.AMA
	LDRMAP	XEDPIC		;ED.PIC
	LDRMAP	XEDFPT		;ED.FPT
	LDRMAP	XEDLSB		;ED.LSB
	LDRMAP	XEDPNC		;ED.PNC
	LDRMAP	XEDLC		;ED.LC
	LDRMAP	XEDCDR		;CARD READER FORMAT
	LDRMAP	XZERR		;"Z" ERRORS
	LDRMAP	XLCTTM		;NO LPT LISTING FORMAT
	LDRMAP	XLCSEQ		;SEQUENCE NUMBERS
	LDRMAP	XCREF,	XEDCRF	;CREF SUPPRESSION
	LDRMAP	XTIME		;NO TIME & DATE ON HEADER
	LDRMAP	XVIRTM		;NO VIRTUAL MEMORY

;THE FOLLOWING PARAMETERS CAN BE MODIFIED AT ASSEMBLY TIME.

.MACRO	PARAM	MNE,	VALUE	;DEFINE DEFAULT PARAMETERS
	.IIF NDF MNE,	MNE=	VALUE
	.LIST
MNE=	MNE
	.NLIST
.ENDM

	PARAM	CPL,	80.	;CHARACTERS PER LISTING LINE
	PARAM	LPP,	60.	;LINES PER PAGE
	.IF NDF	PAL11R
	PARAM	SRCLEN,	132.	;SOURCE STATEMENT LENGTH
	.IFF
	PARAM	SRCLEN,	84.
	.ENDC
LINLEN=	SRCLEN
	PARAM	OCTLEN,	48.
	PARAM	LSTLEN,	LINLEN+OCTLEN+2
	PARAM	BPMB,	20	;BYTES PER MACRO BLOCK
	PARAM	OBJLEN,	42.	;OBJECT BLOCK LENGTH
RLDLEN=	OBJLEN
	PARAM	SMDEXT,	<^RMAC>	;default extension for system macros
	PARAM	SMLLEN,	80.
	PARAM	CRFLEN,	132.	;CREF LENGTH
	PARAM	TTLLEN,	32.	;TITLE LENGTH
	PARAM	STLLEN,	64.	;SUB-TITLE LENGTH
	PARAM	WRKLEN,	0
	PARAM	SYSUIC,	000401	;SYSTEM UIC [1,1]

;GLOBALS DEFINED IN ASSEMBLER

	.GLOBL	ASSEM
	.GLOBL	MACP0,	MACP1,	ENDP1,	MACP2,	ENDP2

	.IF NDF	XSWIT
	.GLOBL	ABSEXP,	CHRPNT,	GETR50,	PASS,	SYMBOL
	.GLOBL	$EDABL,	$NLIST,	EXMFLG,	ARGCNT,	LC.TTM
	.GLOBL	LCMASK,	TTLBUF,	TTLBRK,	ERRBTS
	.ENDC

	.GLOBL	PUTKB,	PUTKBL,	PUTLP

	.GLOBL	DNC,	MOVBYT,	SAVREG,	XMIT0

	.GLOBL	LINBUF,	ERRCNT

	.IF NDF	XBAW
	.GLOBL	CTTBL
	.ENDC

	.IF NDF	XEDABS
	.GLOBL	ED.ABS,	EDMASK
	.ENDC

	.IF NDF	XCREF
	.GLOBL	GSARG
	.ENDC

	.IF DF	TRAPS
	.GLOBL	TRPPRO
	.ENDC

;GLOBALS DEFINED IN MCEXEC

	.IF NDF		XCREF
	.GLOBL	CRFTST,	CRFBUF,	CRFCNT
	.ENDC
	.IF NDF	XTIME
	.GLOBL	DATTIM
	.ENDC
	.IF NDF	XSML
	.GLOBL	FINSML,	INISML
	.ENDC
	.GLOBL	GETPLI,	HDRTTL
	.GLOBL	IO.EOF,	IO.TTY,	IO.ERR
	.GLOBL	SYTTOP,	TSTSTK

	.GLOBL	IOFTBL,	CNTTBL,	BUFTBL

	.IF DF	FIXSTK
	.GLOBL	TSTSYT
	.ENDC

	.SBTTL	Define I/O channels
;+
; File was RTIOCH
; Define MACRO-11 software channels for the RT-11 environment.
;-


.MACRO	GENCHN	ZCHAN,ZBUF,ZBLK,ZRTCHN,ZTYPE
	SETCHN	SRC,SRC,   ,3,0
	SETCHN	LST,LST,   ,1,0
	SETCHN	BIN,OBJ,   ,0,1
	.IF	NDF	XREL
	SETCHN	REL,RLD,   ,0,1
	.ENDC
	.IF	NDF	XSML
	SETCHN	SML,SML,SML,16,0
	.ENDC
	.IF	NDF	XCREF
	SETCHN	CRF,CRF,   ,2,0
	.ENDC
	SETCHN	WRK,WRK,  ,13,0
.ENDM

TMPCNT=	0

.MACRO	SETCHN	ZCHAN,ZBUF,ZBLK,ZRTCHN,ZTYPE
	.LIST
ZCHAN'CHN=	TMPCNT
	.NLIST
TMPCNT=	TMPCNT+2
.ENDM

	GENCHN

MAXCHN=	TMPCNT
	.IRP	X,<READ,WRITE,WAIT,READW,WRITW,CLOUT,FLUSH>
.MACRO	$'X	CHAN
	MOV	#CHAN'CHN,R0
	CALL	$'X
.ENDM	$'X
.ENDM

.IIF	NDF	MCEXEC,.LIST

