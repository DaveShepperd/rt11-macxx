	.TITLE	SETIMM	Enter expr. in code roll
	.IDENT	/04.02/
	.SBTTL	SET TYPE OF REFERENCE FOR CODE GENERATION
;+
; **--SETIMM--CONVERT IMMEDIATE EXPRESSION TO CODE ROLL ENTRY
; **--SETDSP--CONVERT DISPLACED EXPRESSION TO CODE ROLL ENTRY
;-

RS.SEC = 5			;SIZE OF SECTOR ROLL IN WORDS

	PURE	PUREI
SETIMM::			;SET IMMEDIATE MODE
	SAVREG			;SAVE REGISTERS
	SETXPR			;  AND SET "EXPRESSION" TYPE
	.IF NDF	XREL
	MOV	#IMMMOD,R1	;SET TABLE INDEX
	TST	ENDFLG		;SPECIAL FOR .END?
	BNE	SETDS1		;  YES
	BITB	#CPXFLG,(R3)	;++001 COMPLEX RELOCATION EXPRESSION?
	BEQ	1$		;++001 NO PROCEED NORMALLY
	CLR	(R4)		;++001 VALUE OF 0 MEANS IMMEDIATE MODE
	BR	GETCPX		;++001 GET COMPLEX RLD # & CONTINUE
1$:				;++001
	BITB	#GLBFLG,(R3)	;EXTERNAL?
	BNE	SETDS4		;IF NE YES-USE COMMON CODE
	CMPB	(R1)+,(R1)+	;MOVE INDEX
	BITB	#RELFLG,(R3)	;TEST IF RELOCATABLE 
	BEQ	SETDSX		;BRANCH IF NO, ALL SET
	TSTB	(R1)+
	CMPB	(R2),CLCSEC	;YES, CURRENT SECTOR?
	BNE	SETDS1		;  NO
	.IFTF
	BR	SETDSX		;YES
	.IF ne,MACXX&..m69

	.GLOBL	OPCMAP
OPC10	=200
OPC11	=400
AM.S	=20
	.ENDC

SETDSP::			;++006 SET DISPLACED MODE
	SAVREG			;SAVE REGISTERS
	SETXPR			;  AND SET "EXPRESSION" TYPE
	.IFT
	MOV	#DSPMOD,R1	;SET INDEX
	BITB	#CPXFLG,(R3)	;++001 COMPLEX RELOCATION EXPRESSION?
	BEQ	SETDS0		;++001 NO, PROCEED NORMALLY
	MOV	#1,(R4)		;++001 VALUE OF 1 MEANS DISPLACED MODE
GETCPX:	MOV	#CPXRLD,R1	;++001 POINT R1 TO COMPLEX RLD #
	BR	SETDSX		;++001 PROCESS THRU COMMON CODE
SETDS0:				;++001
	BITB	#GLBFLG,(R3)	;EXTERNAL?
	BNE	SETDS3		;  YES, TEST FOR ADDITIVE
	CMPB	(R1)+,(R1)+
	CMPB	(R2),CLCSEC	;CURRENT SECTOR?
	BEQ	SETDS2		;  YES
	TSTB	(R1)+
	TSTB	(R2)		;LOOKING AT ABSOLUTE?
	BEQ	SETDSX		;  YES
SETDS1:	TSTB	(R1)+
	CLR	R0		;CLEAR HIGH ORDER
	BISB	(R2),R0		;SET SECTOR
	IMULI	RS.SEC*2,R0	;MULTIPLY BY BYTES/BLOCK
	ADD	ROLBAS+SECROL,R0	;COMPUTE BASE OF SECTOR ROLL
	MOV	(R0)+,SYMBOL	;XFER SECTOR NAME TO SYMBOL
	MOV	(R0)+,SYMBOL+2
	BR	SETDSX
SETDS2:	CLR	MODE
	.IFTF
	.IF	ne,MACXX&..m69
	MOV	#2,R0		;START WITH PC+2
	BIT	#OPC10!OPC11,OPCMAP	;LONG OPCODE?
	BEQ	1$		;NO
	INC	R0		;YES. +1
1$:	BIT	#AM.S,OPCMAP	;BRANCH?
	BNE	2$		;YES
	INC	R0		;+1 FOR POST BYTE
2$:	TST	BYTMOD		;OFFSET 8 BITS?
	BNE	3$		;YES
	INC	R0		;+1 FOR 16 BIT OFFSET
3$:
	.IFF
	MOVB	ROLSIZ+CODROL+1,R0	;GET CODE ROLL ENTRY NUMBER
	INC	R0
	ASL	R0		;MAKE IT 4 OR 6
	.ENDC
	ADD	CLCLOC,R0
	SUB	R0,(R4)
	.IFT
	BR	SETDSX
SETDS3:	.IF DF	YPHASE
	SUB	PHAOFF,(R4)	;SUBTRACT OUT PHASE OFFSET
	.ENDC
SETDS4:	TST	(R4)		;ANY OFFSET CONSTANT?
	BEQ	SETDSX		;IF EQ NO
	TSTB	(R1)+		;YES, ADVANCE INDEX
SETDSX:
	.IFT
	.IF NDF	XEDPIC
	BIT	#ED.PIC,EDMASK
	BNE	12$
	TSTB	(R1)
	BEQ	12$
	CMPB	(R2),CLCSEC
	BEQ	10$
	CMP	R1,#DSPMOD
	BHIS	11$
	BR	12$
10$:	CMP	R1,#DSPMOD
	BHIS	12$
11$:	ERROR	R
12$:
	.ENDC
	MOVB	(R1),(R2)	;FILL IN TYPE
	.IFTF
	TST	BYTMOD		;IN BYTE MODE?
	BEQ	4$		;  NO
	TSTB	(R4)+		;MOVE TO HIGH BYTE OF "VALUE"
	MOVB	(R4),R0		;ANY HIGH ORDER BITS?
	BEQ	3$		;++001 NO, O.K. TO BRANCH
	INC	R0		;YES, ALL ONES?
	BEQ	3$		;++001 YES, CONTINUE
	ABSERR			;++001 NO, FLAG ERROR
3$:	CLRB	(R4)
	BISB	#200,(R2)	;FLAG AS BYTE
4$:	RETURN
	.IFT

	PURE	TXTBYT,D
IMMMOD:	.BYTE	RLDT02,	RLDT05,	RLDT00,	RLDT01,	RLDT15,	0
DSPMOD:	.BYTE	RLDT04,RLDT06,RLDT00,RLDT03,RLDT16 ;+001
CPXRLD:	.BYTE	RLDT17		;++001
	.ENDC

	.END
